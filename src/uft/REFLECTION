1. In lab you wrote algebraic laws for Kleisli composition using the baby error monad. To claim this point, write algebraic laws for Kleisli composition using the full error monad.

    succeed >=> g === g
    (f >=> g) x === ERROR str where f x == ERROR str
    (f >=> g) x === ERROR str where f x == Ok y, g y == ERROR str

2. To claim this point, define this parsing combinator:

    val commaSep : 'a producer -> 'a list producer =
      fn p =>
        curry op:: <$> p <*> many (the "," >> p)
        <|>
        succeed []

You may include the definition in your REFLECTION file or in your Sunday night submission (in which case, please point to it).

3. To claim this point, identify examples of two different syntactic forms of virtual object code, and compare those examples side by side with the corresponding forms of your assembly language. Explain why you believe that the assembly-language examples are more readable.

    VO: + 1 2 3
    VA: r1 := r2 + r3

    VO: print 1
    VA: print r1

    The Assembly code is much easier to understand since it specifically mentions
    what is a register, and what are the inputs and what are the outputs.

4. It’s good if the assembly language is easy to read and write, but it’s also good if the code inside the UFT is short. To claim this point, use your unparser as evidence to argue at least one of the following positions:

    Both can be accomplished in the same design. For example, a function literal in object code may be written:

    .load function 1 2 3
    + 1 2 3
    - 1 2 3
    % 1 2 3

    But in Assebly code may be:
    r1 := function 2
        r1 := r2 + r3
        r1 := r2 - r3
        r1 := r2 % r3

    Since the assembly code is parsed via indentation, the programmer does not have to
    worry about entering the number of lines the function is when writing it.
    In addition, there are less words to write since redundant words such as the number
    of lines is implicit, and thus does not need to be written

5. To claim this point, make sure your Sunday night submission includes test file unparse.vs and that it passes the test described in step 17 above.

    Done!

6. To claim this point, identify a choice point in your grammar (that is, an alternative between two syntactic forms), where making the choice requires looking at more than one token. If all your choices can be made by looking at a single token—that is, if your grammar is LL(1)—then explain what you did to make that so.

    The add and subtract forms:

    r1 := r2 + r3
    r1 := r2 - r3

    Are implemented in my code to use backtracking, effectively using 4-token lookahead
    However this can be done with only 1 token lookahead but would need to be written differently


7. To claim this point, you will show assembly syntax that your UFT successfully parses and unparses, using code you wrote yourself (or with a partner). You may use the parser you wrote in lab in step 8, or you may use another parser of your choice. Demonstrate that it works with your unparser by feeding an assembly language instruction to the UFT, parsing it, and unparsing it back to the original string, as in this example:

> echo "r1 := r2 + r3" | uft vs-vs
r1 := r2 + r3

    This line of code runs properly

8. To claim this point,

Explain whether and how the embedding/projection concept applies to the abstract syntax and concrete syntax of assembly language.

    Yes - the object code is embedded within assembly

Point to where in your embedding and/or projection are implemented.

    The '@' form

If projection is implemented, how projection failure is manifested.

    This is not done

