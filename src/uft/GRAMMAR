
An assembly file is made up of instructions
Each instruction must be separated from another via a newline or semicolon
Comments begin with the character '#' and continue until EOL
Labels can be placed on their own line or before an instruction
Labels are indicated with a ':' suffix, ex.

my-label:

Note: '-', '?', '!' are valid in identifiers, although not to start them

Registers are written '%n' for integer n

Binary ops are written:
    %1 := %2 op %3
Where op is one of:
    + - * / % // = < > <= >=
Note: '//' represents integer division

Prefix unary functions with return values are written:
    %1 := f %2
Where f is one of:
    function? pair? symbol? number? boolean? null? nil?
    car cdr hash

The binary prefix function cons is written:
    %1 := cons %2 %3

The unary functions without return values are written:
    f %1
Where f is one of:
    print printu println error if

Literals are loaded via
    %1 := lit
Where lit is:
    A string, delimited by double-quotes
    A number, written in integer / float syntax
    true
    false
    emptylist
    nil

Offset gotos are written 
    goto n
Where n is an integer

Labeled gotos are written
    goto lbl
Where lbl is a label identifier

Functions are loaded via
    %1 := function arity {
        instructions*
    }
Where arity is an integer,
instructions* is a sequence of instructions


