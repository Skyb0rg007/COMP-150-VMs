Names. You understand all the species of names and where they come from.

(define foo (y)
  (lambda (x)
    (cons x (cons y z))))

    cons - prim
    x - local
    y - captured
    z - global

Global and local names. You understand the different behaviors of local and global names.

  ClosureConvert.hs - lines 48-51

Embedding and projection. You understand how to embed closures into vScheme.

  Uft.KNormal.Types.hs - lines 100-102
  (I know this looks weird since its a typeclass)

Embedded code and VM code. You understand how the embedding relates to SVM code.

  vmrun.c - line 300

Environments. You understand the relationship between two different environments: the body of a function vs the environment where the function is defined.

  Uft.UScheme.KNormalize.hs - line 103
  The `rho` variable maps captured names to the capture index

Closure conversion and code generation. You can predict what will happen if a captured variable is overlooked.

  Uft.UScheme.KNormalize.hs - line 80
  Error message

Closure conversion and mutable data. You can say what would happen if we allowed arbitrary mutation in source code.

  Uft.UScheme.KNormalize.hs - line 117
  Error message

Mutual recursion. You know how to build the shared environment used by a nest of mutually recursive functions.

  Uft.UScheme.KNormalize.hs - line 109

  

