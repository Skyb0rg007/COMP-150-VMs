/** @file svm/config.h
 * @author Skye Soss
 * @copyright MIT
 * @brief Configurable settings for the SVM
 * Contains macros that can be modified in CMake,
 * as well as including all C99 headers, stubbing ones that are unavailable
 */
#ifndef SVM_CONFIG_H
#define SVM_CONFIG_H

/* Configuration macros */
#define SVM_VERSION             "@SVM_VERSION@"
#define SVM_STRING_MAX_SHORTLEN @SVM_STRING_MAX_SHORTLEN@
#define SVM_STRING_MIN_STRTAB   @SVM_STRING_MIN_STRTAB@
#define SVM_DEBUG_LEVEL         @SVM_DEBUG_LEVEL@
#cmakedefine01 SVM_DEBUG_LINEINFO
#cmakedefine01 SVM_HAS_STDBOOL_H
#cmakedefine01 SVM_HAS_INTTYPES_H
#cmakedefine01 SVM_USE_COMPUTED_GOTO

/* C standard headers (TODO: stub non-ansi headers) */
#include <assert.h>
#include <complex.h> /* C99 */
#include <ctype.h>
#include <errno.h>
#include <fenv.h> /* C99 */
#include <float.h>
#include <inttypes.h> /* C99 */
#include <iso646.h> /* C95 */
#include <limits.h>
#include <locale.h>
#include <math.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h> /* C99 */
#include <stddef.h>
#include <stdint.h> /* C99 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

/* Function attributes */
/* TODO: feature test */
#define SVM_ATTR_ALLOC_SIZE(idx)    __attribute__((__alloc_size__(idx)))
#define SVM_ATTR_ALWAYS_INLINE      __attribute__((__always_inline__))
#define SVM_ATTR_CONST              __attribute__((__const__))
#define SVM_ATTR_MALLOC             __attribute__((__malloc__))
#define SVM_ATTR_NONNULL(...)       __attribute__((__nonnull__(__VA_ARGS__)))
#define SVM_ATTR_NORETURN           __attribute__((__noreturn__))
#define SVM_ATTR_PRINTF(idx, fst)   __attribute__((__format__(__printf__, idx, fst)))
#define SVM_ATTR_PURE               __attribute__((__pure__))
#define SVM_ATTR_RETURNS_NONNULL    __attribute__((__returns_nonnull__))
#define SVM_ATTR_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))

/* Utility macros */
#define SVM_ARRAY_SIZE(arr)  (sizeof(arr) / sizeof(arr[0]))
#define SVM_UNUSED(arg)      ((void)arg)
#define SVM_MAX(a, b)        ((a) < (b) ? (b) : (a))
#define SVM_MIN(a, b)        ((a) < (b) ? (a) : (b))
#define SVM_BETWEEN(a, b, c) ((b) < (a) && (a) < (c))

#endif /* ifndef SVM_CONFIG_H */
